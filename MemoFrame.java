package com.srs.projectOb;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.Window;
import java.awt.event.WindowEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Timer;

import javax.swing.JOptionPane;
import javax.swing.text.AbstractDocument;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;

import com.srs.projectOb.Utils.AppConstant;
import com.srs.projectOb.Utils.AppUtils;
import com.srs.projectOb.Utils.DocumentSizeFilter;
import com.srs.projectOb.network.NetworkRequester;
import com.srs.projectOb.pojo.ProjectPojo;
import com.srs.projectOb.pojo.SubTaskPojo;
import com.srs.projectOb.pojo.TaskPojo;
import com.srs.projectOb.pojo.UserPojo;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author RC
 */
public class MemoFrame extends javax.swing.JFrame {

    private ProjectPojo projectPojo1 = null;
    private String[] memoTaskList;
    private String[] memoSubTaskList;
    private HashMap<Integer, String> memoMap;
    private HashMap<Integer, String> tempmap;
    private ArrayList<TaskPojo> taskList;
    private ArrayList<SubTaskPojo> subtaskList;

    public MemoFrame(ProjectPojo projectPojo) {
        initComponents();
        this.projectPojo1 = projectPojo;
		if (projectPojo == null) {
			projectPojo1 = AppUtils.getProjectPojo();
		}
        setListOfTaskAndSubtask();
    }

    private void setListOfTaskAndSubtask() {
    	if(taskList != null && taskList.size() > 0 )
    	{
    		taskList.clear();
    	}
    	taskList = AppUtils.getTaskList(projectPojo1.id);
    	if(memoMap != null && memoMap.size() > 0 )
    	{
    		memoMap.clear();
    	}
		memoMap = AppUtils.getMemoList();
		if (memoDropDown !=null && memoDropDown.getItemCount() > 0)
		{
			memoDropDown.removeAllItems();
		}
        try {
			if (taskList.size() > 0) {
				memoTextArea.setEnabled(false);
				memoTaskList = new String[taskList.size()];
				subTaskJPanel.setVisible(true);
				for (int i = 0; i < taskList.size(); i++) {
					memoTaskList[i] = taskList.get(i).taskSummary;
					System.out.println("MemoDropdown="+memoDropDown);
					System.out.println("taskList.get(i).taskSummary="+taskList.get(i).taskSummary);
					memoDropDown.addItem(taskList.get(i).taskSummary);
				}
			} else if(memoMap!=null){
				memoTextArea.setEnabled(true);
				memoTaskList = new String[memoMap.size()];
				subTaskJPanel.setVisible(false);
				memoMap = AppUtils.getMemoList();

				memoTaskList = new String[memoMap.size()];
				for (int i = 0; i < memoMap.size(); i++) {
					memoTaskList[i] = memoMap.get(i);
					memoDropDown.addItem(memoMap.get(i));
				}
			}
			subTaskJPanel.setVisible(false);

			AbstractDocument pDoc = (AbstractDocument) memoTextArea.getDocument();
			pDoc.setDocumentFilter(new DocumentSizeFilter(AppConstant.MAX_CHAR));

			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
			this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);


			memoTextArea.setText("" + projectPojo1.memo);
		}catch(Exception e)
		{
			e.printStackTrace();
		}
		
	}

	/**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMemoButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        memoTextArea = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        memoDropDown = new javax.swing.JComboBox();
        subTaskJPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        subtaskDropDown = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        getContentPane().setLayout(null);

        addMemoButton.setText("Add Memo");
        addMemoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMemoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(addMemoButton);
        addMemoButton.setBounds(419, 11, 96, 23);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        getContentPane().add(cancelButton);
        cancelButton.setBounds(344, 11, 70, 23);

        memoTextArea.setColumns(20);
        memoTextArea.setRows(5);
        jScrollPane1.setViewportView(memoTextArea);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(10, 40, 505, 188);

        jLabel1.setText("Task :");

        memoDropDown.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
        memoDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                memoDropDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(memoDropDown, 0, 243, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(memoDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(10, 230, 248, 64);

        jLabel2.setText("Sub-Task :");

        subtaskDropDown.setActionCommand("");
        subtaskDropDown.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                subtaskDropDownActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout subTaskJPanelLayout = new javax.swing.GroupLayout(subTaskJPanel);
        subTaskJPanel.setLayout(subTaskJPanelLayout);
        subTaskJPanelLayout.setHorizontalGroup(
            subTaskJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subTaskJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subTaskJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subTaskJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addContainerGap(191, Short.MAX_VALUE))
                    .addComponent(subtaskDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        subTaskJPanelLayout.setVerticalGroup(
            subTaskJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subTaskJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(subtaskDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        getContentPane().add(subTaskJPanel);
        subTaskJPanel.setBounds(260, 230, 248, 64);

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshMemo();
            }
        });
        getContentPane().add(jButton3);
        jButton3.setBounds(10, 11, 80, 23);
        setSize(526, 320);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        WindowEvent we = new WindowEvent((Window) this, WindowEvent.WINDOW_CLOSING);
		dispatchEvent(we);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addMemoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMemoButtonActionPerformed
		if (memoTextArea.getText().trim().equals("")) {
			JOptionPane.showMessageDialog(null, "Please enter task or select from the task list.");
			return;
		}

		projectPojo1.memo = memoTextArea.getText();
		AppUtils.logger.warn("memo lenth =" + projectPojo1.memo.length());
		new File(AppConstant.PROJECT_MEMO_FILE).delete();
		AppUtils.writeResponse(AppConstant.PROJECT_MEMO_FILE, AppUtils.setWritePojectPojo(projectPojo1));

		// Add memo in memo List
		// By using Flag , we can get to know , the memo is already present in
		// List or not
		Boolean memoPresent = false;

		for (int i = 0; i < memoMap.size(); i++) {
			if (memoMap.get(i).equals(memoTextArea.getText())) {
				// If it is not available and User has entered new memo , Then
				// that to be add in Stack list
				memoPresent = true;
				break;
			}
		}

		if (!memoPresent) {
			tempmap = new HashMap<Integer, String>();
			AppUtils.logger.warn("Not present" + memoMap.size());
			int i = 0;
			int k = 0;
			while (i < memoMap.size()) {
				k = i + 1;
				if (k < 5) {
					tempmap.put(k, memoMap.get(i));
				}
				i++;
			}

			memoMap = tempmap;
			// for (int i = 0; i < memoMap.size(); i++) {
			//
			// //Put value on next index
			// AppUtils.logger.warn("on "+(i)+" ="+memoMap.get(i));
			// memoMap.put(i, memoMap.get(i));
			// }
			memoMap.put(0, memoTextArea.getText());

			AppUtils.writeResponse(AppConstant.MEMO_FILE, AppUtils.setWriteMemoList(memoMap));
		}

		dispose();

		AppUtils.snapCaptureService();
    }//GEN-LAST:event_addMemoButtonActionPerformed

    private void subtaskDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_subtaskDropDownActionPerformed
        String selectedMemo = (String) subtaskDropDown.getSelectedItem();
		if(selectedMemo!=null)
		{
			memoTextArea.setText(selectedMemo);
			for (int i=0;i  < subtaskList.size(); i++){
				if(subtaskList.get(i).subTaskSummary.equals(selectedMemo.trim()))
				{
					int selectedTaskId = subtaskList.get(i).subTaskId;
					projectPojo1.memoId =selectedTaskId;
				}
			}
		}
    }//GEN-LAST:event_subtaskDropDownActionPerformed

    private void memoDropDownActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_memoDropDownActionPerformed
        try{
			String selectedMemo = (String) memoDropDown.getSelectedItem();
			if(selectedMemo!=null)
			{
				int selectedTaskId = -1;
				for (int i=0;i  < taskList.size(); i++){
					if(taskList.get(i).taskSummary.equals(selectedMemo.trim()))
					{
						selectedTaskId = taskList.get(i).taskId;
						projectPojo1.memoId =selectedTaskId;
					}
				}
				subtaskList = AppUtils.getSubTaskList(selectedTaskId);
				memoSubTaskList =new String[subtaskList.size()];
				if( subtaskDropDown.getItemCount() > 0)
				{
					subtaskDropDown.removeAllItems();
				}
				if(subtaskList.size() > 0)
				{
					subTaskJPanel.setVisible(true);
					for (int i = 0; i < subtaskList.size(); i++) {
						memoSubTaskList[i] = subtaskList.get(i).subTaskSummary;
						subtaskDropDown.addItem(subtaskList.get(i).subTaskSummary.trim());
					}
					return;
				}else{
					subTaskJPanel.setVisible(false);
				}
				memoTextArea.setText(selectedMemo);
			}
		}catch(Exception e)
		{
			e.printStackTrace();
			AppUtils.logger.error("Error in parsing memoDropDownActionPerformed :: "+e.getMessage());
		}
    }
    
    private void refreshMemo() {

		try {

				if (AppConstant.MEMO_REQUEST_FLAG) {
					if (AppUtils.netIsAvailable()) {
						UserPojo userPojo = AppUtils.getUserPojo(null);
						List<NameValuePair> param = new ArrayList<NameValuePair>();
						param.add(new BasicNameValuePair("project_id",
								String.valueOf(projectPojo1.id)));
						param.add(new BasicNameValuePair("authkey", userPojo.authKey));
						param.add(new BasicNameValuePair("user_id", userPojo.userId));

						NetworkRequester.sendPost(AppConstant.URL + AppConstant.PROJECT_TASKS, param,
								new NetworkRequester.NetworkInterface() {

									@Override
									public void inResponseSuccess(String response) {
										AppUtils.writeResponse(AppConstant.MEMO_LIST_BY_PROJECT_FILE, response);
										setListOfTaskAndSubtask();
									}
								});
					}
				}
		} catch (Exception e) {
			AppUtils.logger.error("Exception in ProjectListFrame :: " + e.getMessage());
		}

	}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addMemoButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox memoDropDown;
    private javax.swing.JTextArea memoTextArea;
    private javax.swing.JPanel subTaskJPanel;
    private javax.swing.JComboBox subtaskDropDown;
    // End of variables declaration//GEN-END:variables
}
